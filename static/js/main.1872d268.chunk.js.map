{"version":3,"sources":["data/BubbleGraph/land-area-by-country.csv","data/BubbleGraph/population-by-country-2000-2014.csv","data/BubbleGraph/co2-by-country-2000-2014.csv","data/BubbleGraph/country-flags.csv","data/Choropleth/county-temp-1979-2011.csv","data/LineGraph/co2-ppm-0-500.csv","data/LineGraph/co2-ppm-500-1000.csv","data/LineGraph/co2-ppm-1000-1500.csv","data/LineGraph/co2-ppm-1500-2014.csv","data/LineGraph/co2-ppm-total.csv","components/Clouds/CloudLeft/CloudLeft.js","components/Clouds/CloudMiddle/CloudMiddle.js","components/Clouds/CloudRight/CloudRight.js","components/HeroBanner/HeroBanner.js","components/BubbleGraph/SliderHandle/SliderHandle.js","components/BubbleGraph/HorizontalSlider/HorizontalSlider.js","components/BubbleGraph/BubbleGraph.js","components/Choropleth/ControlButtons/ControlButtons.js","components/Choropleth/Choropleth.js","components/LineGraph/LineGraph.js","components/StoryboardContainer/StoryboardContainer.js","App.js","AppContainer.js","index.js"],"names":["module","exports","__webpack_require__","p","CloudLeft","react_default","a","createElement","lib","className","offsetYMax","offsetYMin","tag","src","CloudMiddle","CloudRight","HeroBanner","slowerScrollRate","Clouds_CloudLeft_CloudLeft","Clouds_CloudRight_CloudRight","Clouds_CloudMiddle_CloudMiddle","Handle","Slider","SliderHandle","props","value","dragging","index","restProps","Object","objectWithoutProperties","rc_tooltip_es","prefixCls","overlay","visible","placement","key","assign","HorizontalSlider","_this","this","rc_slider_es","min","max","defaultValue","handle","onChange","v","updateBubbleGraph","Component","ControlButtons","isOn","showButtons","pauseMap","startMap","resetMap","onClick","fa","LineGraph","state","co2Data500","co2Data1000","co2Data1500","co2Data2000","co2DataTotal","data","segmentIndex","handleClick","segment","console","log","setState","concat","_this2","Promise","all","d3","then","files","co2DataFirst","map","d","x","parseInt","year","y","data_mean_global","co2DataSecond","co2DataThird","co2DataFourth","_this3","es","animate","onMouseLeave","width","height","yDomain","curve","onNearestX","StoryboardContainer","components_HeroBanner_HeroBanner","components_LineGraph_LineGraph","App","components_StoryboardContainer_StoryboardContainer","AppContainer","src_App","ReactDOM","render","src_AppContainer","document","getElementById"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iFCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gRCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0aCqBzBC,UAhBG,WAChB,OACEC,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEC,UAAU,kBACVC,WAAY,GACZC,YAAa,GACbC,IAAI,UAEJP,EAAAC,EAAAC,cAAA,OACEE,UAAU,oBACVI,IAAI,oJCIGC,UAdK,WAClB,OACET,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEG,YAAa,IACbC,IAAI,UAEJP,EAAAC,EAAAC,cAAA,OACEE,UAAU,sBACVI,IAAI,oJCQGE,UAhBI,WACjB,OACEV,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEC,UAAU,kBACVC,WAAY,GACZC,YAAa,GACbC,IAAI,UAEJP,EAAAC,EAAAC,cAAA,OACEE,UAAU,qBACVI,IAAI,8HCaGG,UArBI,kBACjBX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4BACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BACbJ,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEC,UAAU,gBACVC,WAAY,GACZC,YAAa,GACbM,kBAAkB,EAClBL,IAAI,UAEJP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBAAf,cACaJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAAhB,cAGfJ,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,mDCnBAC,EAASC,IAAOD,OAkBPE,EAhBM,SAACC,GAAU,IACtBC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,MAAUC,EADLC,OAAAC,EAAA,EAAAD,CACmBL,EADnB,8BAG9B,OACEnB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,UAAU,oBACVC,QAASR,EACTS,QAASR,EACTS,UAAU,MACVC,IAAKT,GAELtB,EAAAC,EAAAC,cAACc,EAADQ,OAAAQ,OAAA,CAAQZ,MAAOA,GAAWG,MCOjBU,2LAfJ,IAAAC,EAAAC,KACP,OACEnC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACbJ,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CACEC,IAAK,IACLC,IAAK,KACLC,aAAc,IACdC,OAAQtB,EACRuB,SAAU,SAACC,GAAD,OAAOR,EAAKf,MAAMwB,kBAAkBD,cAVzBE,gGCOLA,2BCuBXC,UA9BQ,SAAC1B,GAAU,IACxB2B,EAAoD3B,EAApD2B,KAAMC,EAA8C5B,EAA9C4B,YAAaC,EAAiC7B,EAAjC6B,SAAUC,EAAuB9B,EAAvB8B,SAAUC,EAAa/B,EAAb+B,SAE/C,OACElD,EAAAC,EAAAC,cAAA,WACG6C,GAAeD,GACd9C,EAAAC,EAAAC,cAAA,OACEiD,QAAS,kBAAMH,MAEfhD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAShD,UAAW,iBAGvB2C,IAAgBD,GACf9C,EAAAC,EAAAC,cAAA,OACEiD,QAAS,kBAAMF,MAEfjD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAQhD,UAAW,kBAGrB2C,GACA/C,EAAAC,EAAAC,cAAA,OACEiD,QAAS,kBAAMD,MAEflD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAQhD,UAAW,yDClBJwC,qGCoFVS,qNAjFZC,MAAQ,CACPC,WAAY,GACZC,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,aAAc,GACdC,KAAM,GACNC,aAAc,EACdzC,OAAO,KA4BT0C,YAAc,WAAM,IACVD,EAAiB3B,EAAKoB,MAAtBO,aAEFE,EADc,CAAC,cAAe,cAAe,cAAe,gBACtCF,GAC5BG,QAAQC,IAAIJ,GACRA,GAAgB,GAClB3B,EAAKgC,SAAS,CACZN,KAAM1B,EAAKoB,MAAMM,KAAKO,OAAOjC,EAAKoB,MAAMS,IACxCF,aAAc3B,EAAKoB,MAAMO,aAAe,wFAjC1B,IAAAO,EAAAjC,KAClBkC,QAAQC,IAAI,CACVC,IAAOhB,KACPgB,IAAOf,KACPe,IAAOd,KACPc,IAAOb,KACPa,IAAOZ,OAERa,KAAK,SAACC,GACL,IAAMC,EAAeD,EAAM,GAAGE,IAAI,SAAAC,GAAC,MAAK,CAAEC,EAAGC,SAASF,EAAEG,MAAOC,EAAGF,SAASF,EAAEK,qBACvEC,EAAgBT,EAAM,GAAGE,IAAI,SAAAC,GAAC,MAAK,CAAEC,EAAGC,SAASF,EAAEG,MAAOC,EAAGF,SAASF,EAAEK,qBACxEE,EAAeV,EAAM,GAAGE,IAAI,SAAAC,GAAC,MAAK,CAAEC,EAAGC,SAASF,EAAEG,MAAOC,EAAGF,SAASF,EAAEK,qBACvEG,EAAgBX,EAAM,GAAGE,IAAI,SAAAC,GAAC,MAAK,CAAEC,EAAGC,SAASF,EAAEG,MAAOC,EAAGF,SAASF,EAAEK,qBACxEtB,EAAec,EAAM,GAAGE,IAAI,SAAAC,GAAC,MAAK,CAAEC,EAAGC,SAASF,EAAEG,MAAOC,EAAGF,SAASF,EAAEK,qBAC7Eb,EAAKF,SAAS,CACZX,WAAYmB,EACZlB,YAAa0B,EACbzB,YAAa0B,EACbzB,YAAa0B,EACbzB,aAAcA,EACdC,KAAMc,uCAkBH,IAAAW,EAAAlD,KACC0B,EAAiB1B,KAAKmB,MAAtBO,aACR,OACE7D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,UAAQiD,QAAS,kBAAMkC,EAAKvB,gBAA5B,YAGA9D,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACEC,SAAS,EACTnF,UAAU,kBACVoF,aAAc,kBAAMH,EAAKnB,SAAS,CAAC9C,OAAO,KAC1CqE,MAAO,IACPC,OAAQ,IACRC,QAA2B,IAAjB9B,EAAqB,KAAO,CAAC,IAAK,MAE5C7D,EAAAC,EAAAC,cAACoF,EAAA,EAAD,MACAtF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,MACAtF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,MACAtF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,MACAtF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CACElF,UAAU,kBACVwF,MAAO,iBACPhC,KAAMzB,KAAKmB,MAAMM,KACjBiC,WAAY,SAAAjB,GAAC,OAAIS,EAAKnB,SAAS,CAAC9C,MAAOwD,OAExCzC,KAAKmB,MAAMlC,OAASpB,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAMlE,MAAOe,KAAKmB,MAAMlC,iBA3E/BwB,cCYTkD,2LAXX,OACE9F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6F,EAAD,MACA/F,EAAAC,EAAAC,cAAC8F,EAAD,cAP0BpD,cCNnBqD,EAFH,kBAAMjG,EAAAC,EAAAC,cAACgG,EAAD,OCYHC,mLARX,OACEnG,EAAAC,EAAAC,cAACC,EAAA,iBAAD,KACEH,EAAAC,EAAAC,cAACkG,EAAD,cAJmBxD,aCD3ByD,IAASC,OAAOtG,EAAAC,EAAAC,cAACqG,EAAD,MAAkBC,SAASC,eAAe","file":"static/js/main.1872d268.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/land-area-by-country.3064315f.csv\";","module.exports = __webpack_public_path__ + \"static/media/population-by-country-2000-2014.88f1cef7.csv\";","module.exports = __webpack_public_path__ + \"static/media/co2-by-country-2000-2014.5cb5bbd6.csv\";","module.exports = __webpack_public_path__ + \"static/media/country-flags.a1597ea9.csv\";","module.exports = __webpack_public_path__ + \"static/media/county-temp-1979-2011.72529182.csv\";","module.exports = __webpack_public_path__ + \"static/media/co2-ppm-0-500.79b47e9d.csv\";","module.exports = __webpack_public_path__ + \"static/media/co2-ppm-500-1000.b57156e8.csv\";","module.exports = __webpack_public_path__ + \"static/media/co2-ppm-1000-1500.a15e202e.csv\";","module.exports = __webpack_public_path__ + \"static/media/co2-ppm-1500-2014.7186878a.csv\";","module.exports = __webpack_public_path__ + \"static/media/co2-ppm-total.e6f2fa40.csv\";","import React from 'react';\nimport { Parallax } from 'react-scroll-parallax';\n\nimport './CloudLeft.css';\n\nconst CloudLeft = () => {\n  return (\n    <Parallax\n      className='image-container'\n      offsetYMax={10}\n      offsetYMin={-10}\n      tag='figure'\n    >\n      <img \n        className='inline-image-left'\n        src='https://gallery.yopriceville.com/var/resizes/Free-Clipart-Pictures/Cloud-PNG/Realistic_Cloud_PNG_Transparent_Clip_Art_Image.png?m=1507172105' \n      />\n    </Parallax>\n  );\n}\n\nexport default CloudLeft;\n","import React from 'react';\nimport { Parallax } from 'react-scroll-parallax';\n\nimport './CloudMiddle.css';\n\nconst CloudMiddle = () => {\n  return (\n    <Parallax\n      offsetYMin={-500}\n      tag='figure'\n    >\n      <img \n        className='inline-image-middle'\n        src='https://gallery.yopriceville.com/var/resizes/Free-Clipart-Pictures/Cloud-PNG/Realistic_Cloud_Transparent_PNG_Clip_Art_Image.png?m=1507172105' \n      />\n    </Parallax>\n  );\n}\n\nexport default CloudMiddle;\n","import React from 'react';\nimport { Parallax } from 'react-scroll-parallax';\n\nimport './CloudRight.css';\n\nconst CloudRight = () => {\n  return (\n    <Parallax\n      className='image-container'\n      offsetYMax={10}\n      offsetYMin={-50}\n      tag='figure'\n    >\n      <img \n        className='inline-image-right'\n        src='https://gallery.yopriceville.com/var/resizes/Free-Clipart-Pictures/Cloud-PNG/Cloud_Clip_Art_PNG_Image.png?m=1507172105' \n      />\n    </Parallax>\n  );\n}\n\nexport default CloudRight;\n","import React from 'react';\nimport { Parallax } from 'react-scroll-parallax';\n\nimport { CloudLeft, CloudMiddle, CloudRight } from '../Clouds';\n\nimport './HeroBanner.css';\n\nconst HeroBanner = () => (\n  <div className='parallax-hero-background'>\n    <div className='parallax-hero-container'>\n      <Parallax\n        className=\"parallax-hero\"\n        offsetYMax={20}\n        offsetYMin={-20}\n        slowerScrollRate={true}\n        tag=\"figure\"\n      >\n        <div className='parallax-hero-content'>\n          A Climate, <span className='text-rd'>Changing</span>\n        </div>\n      </Parallax>\n      <CloudLeft />\n      <CloudRight />\n      <CloudMiddle />\n    </div>\n  </div>\n);\n\nexport default HeroBanner;","import React from 'react';\nimport Tooltip from 'rc-tooltip';\nimport Slider from 'rc-slider';\n\nconst Handle = Slider.Handle;\n\nconst SliderHandle = (props) => {\n  const { value, dragging, index, ...restProps } = props;\n  \n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={value}\n      visible={dragging}\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nexport default SliderHandle;\n","import React, { Component } from 'react';\nimport Slider from 'rc-slider';\n\nimport SliderHandle from '../SliderHandle';\n\nimport './HorizontalSlider.css';\n\nclass HorizontalSlider extends Component {\n  \n  render() {\n    return (\n      <div className='slider-container'>\n        <Slider \n          min={2000} \n          max={2014} \n          defaultValue={2000} \n          handle={SliderHandle} \n          onChange={(v) => this.props.updateBubbleGraph(v)}\n        />\n      </div>\n    )\n  }\n}\n\nexport default HorizontalSlider;\n","// External imports\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { XYPlot, XAxis, YAxis, MarkSeries, Hint } from 'react-vis';\n\n// Internal imports\nimport HorizontalSlider from './HorizontalSlider';\nimport landData from '../../data/BubbleGraph/land-area-by-country.csv';\nimport populationData from '../../data/BubbleGraph/population-by-country-2000-2014.csv';\nimport co2Data from '../../data/BubbleGraph/co2-by-country-2000-2014.csv';\nimport countryFlags from '../../data/BubbleGraph/country-flags.csv'\n\nimport './BubbleGraph.css';\n\nclass BubbleGraph extends Component {\n  state = {\n    countryFlags: null,\n    data: null,\n    totalPopData: null,\n    totalCo2Data: null,\n    totalLandData: null,\n    value: false\n  };\n\n  componentDidMount() {\n    Promise.all([\n      d3.csv(landData),\n      d3.csv(populationData),\n      d3.csv(co2Data),\n      d3.csv(countryFlags),\n    ])\n    .then((files) => {\n      this.setState({\n        totalLandData: files[0],\n        totalPopData: files[1],\n        totalCo2Data: files[2],\n        countryFlags: files[3],\n      }, () => {\n        this.setState({\n          data: this.setData(2000),\n        })\n      })\n    })\n  }\n\n  componentDidUpdate() {\n    let diameter = [];\n\n    d3.selectAll('circle').each(function() {\n        const el = this;\n        diameter.push(Math.ceil(d3.select(this).attr('r') * 2 ));\n        d3.select(el.parentNode)\n          .insert(\"svg\")\n          .attr(\"class\", \"wrapped\")\n          .append(function() { return el; });\n    })\n        .attr('style', (d, i) => `fill: url(#country-${i}) !important` )\n\n    d3.selectAll('.wrapped')\n      .append(\"defs\")\n      .append('pattern')\n        .attr('id', (d, i) => `country-${i}`)\n        .attr('width', '100%')\n        .attr('height', '100%')\n      .append(\"image\")\n        .attr(\"xlink:href\", (d, i) => this.state.countryFlags[i]['URL'])\n        .attr('width', (d, i) => diameter[i])\n        .attr('height', (d, i) => diameter[i])\n\n  }\n\n  setData = year => {\n    const { totalCo2Data, totalLandData, totalPopData } = this.state;\n    return new Array(36).fill(0).map((row, i) => ({\n      Country: totalPopData[i]['Country'],\n      x: parseInt(totalCo2Data[i][year]),\n      y: parseInt(totalLandData[i].Area),  \n      size: parseInt(totalPopData[i][year]), \n    }));\n  }\n\n  updateBubbleGraph = year => {\n    this.setState({\n      data: this.setData(year),\n    });\n  }\n\n  render() {\n    const { data, colorType } = this.state;\n\n    const markSeriesProps = {\n      animation: true,\n      sizeRange: [10, 50],\n      seriesId: 'BubbleGraph',\n      opacityType: 'literal',\n      data,\n      onValueMouseOver: value => this.setState({value}),\n    };\n\n    return (\n      <div>\n        <div className=\"plot-wrapper\">\n          <XYPlot\n            margin={{ top:75, bottom:100, left:75}}\n            onMouseLeave={() => this.setState({value: false})}\n            width={960}\n            height={600}\n            yType='log'\n            xType='log'\n            xDomain={[15000, 10000000]}\n            yDomain={[15000, 30000000]}\n            noHorizontalGridLines\n            noVerticalGridLines\n          >\n            <XAxis \n              position=\"end\"\n              title=\"Greenhouse gas emissions (metric tonnes)\"\n              tickLabelAngle={-45}\n              tickSize={4}\n              tickFormat={ (value, i, scale, tickTotal) => {\n                return `${scale.tickFormat(10, '.0s')(value)}`\n              }}\n            />\n            <YAxis \n              position=\"end\"\n              title=\"Land area (sq. km)\"\n              tickSize={4}\n              tickFormat={ (value, i, scale, tickTotal ) => {\n                return `${scale.tickFormat(10, '.0s')(value)}`\n              }}\n            />\n            <MarkSeries {...markSeriesProps} />\n            {this.state.value \n              ? <Hint \n                align={{horizontal: 'right', vertical: 'top'}}\n                value={this.state.value} \n              /> \n              : null\n            }\n          </XYPlot>\n        </div>\n        <HorizontalSlider \n          updateBubbleGraph={this.updateBubbleGraph}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BubbleGraph;\n","// External imports\nimport React from 'react';\nimport { FaPause, FaPlay, FaRedo } from 'react-icons/fa';\n\n// Internal imports\nimport './ControlButtons.css';\n\nconst ControlButtons = (props) => {\n  const { isOn, showButtons, pauseMap, startMap, resetMap } = props;\n  \n  return (\n    <div>\n      {showButtons && isOn && \n        <div \n          onClick={() => pauseMap()}\n        >\n          <FaPause className={'btn-control'}/>\n        </div>\n      }\n      {showButtons && !isOn && \n        <div \n          onClick={() => startMap()}\n        >\n          <FaPlay className={'btn-control'}/>\n        </div>\n      }\n      {!showButtons &&\n        <div \n          onClick={() => resetMap()}\n        >\n          <FaRedo className={'btn-control'}/>\n        </div>\n      }\n    </div>\n  );\n};\n\nexport default ControlButtons;","// External imports\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson';\n\n// Internal imports\nimport ControlButtons from './ControlButtons';\nimport tempData from '../../data/Choropleth/county-temp-1979-2011.csv';\nimport yearData from '../../data/Choropleth/county-temp-years-1979-2011.json';\n\nimport './Choropleth.css';\n\nclass Choropleth extends Component {\n  state = {\n    color: null,\n    counties: null,\n    format: d3.format(''),\n    index: 0,\n    isOn: true,\n    showButtons: true,\n    totalTempData: null,\n    us: null,\n    yearTempData: null,\n    years: yearData.years,\n  }\n\n  componentDidMount() {\n    Promise.all([\n      d3.json(\"https://unpkg.com/us-atlas@1/us/10m.json\"),\n      d3.csv(tempData),\n    ])\n    .then((files) => {\n      const totalTempData = files[1];\n      const yearTempData = new Map(files[1].map(d => [d['County Code'], d[1979]]));\n      const counties = new Map(files[1].map(d => [d['County Code'], d['County']]));\n      const color = d3.scaleQuantize().domain([36, 90]).range(d3.schemeReds[9]);\n\n      this.setState({\n        counties,\n        yearTempData,\n        totalTempData,\n        color,\n        us: files[0],\n      }, \n        () => {\n          this.renderMap();\n          this.startMap();\n        }\n      );\n    })\n  }\n\n  resetMap = () => {\n    this.setState({ \n      index: 0, \n      isOn: true,\n      showButtons: true,\n    }, () => {\n      clearInterval(this.timer);\n      this.startMap();\n    });\n  }\n\n  pauseMap = () => {\n    this.setState({ \n      isOn: false \n    }, () => {\n      clearInterval(this.timer);\n    });\n  }\n\n  endMap = () => {\n    clearInterval(this.timer);\n    this.setState({ \n      isOn: false,\n      showButtons: false,\n      index: 32,\n    });\n  }\n\n  startMap = () => {\n    this.setState({isOn: this.state.years[this.state.index] !== 2011});\n\n    this.timer = setInterval(() => {\n      const { color, counties, years, index, totalTempData } = this.state;\n      const isLastYear = years[index] === 2011;\n      if (isLastYear) this.endMap()\n      const yearTempData = new Map(totalTempData.map(d => [d['County Code'], d[years[index]]]));\n      this.setState({\n        yearTempData,\n        index: isLastYear ? 32 : index + 1,\n      }, \n        () => {\n          d3.selectAll('path.county')\n            .attr(\"fill\", d => color(yearTempData.get(d.id)))\n            .select(\"title\")\n              .text(d =>  {\n                const county = counties.get(d.id);\n                const countyTemp = yearTempData.get(d.id);\n                return isNaN(countyTemp) ? \"Missing value\" : `${county} - ${countyTemp}F`; \n              });\n        }  \n      );\n    }, 1000);\n  }\n\n  renderMap = () => {\n    const { color, counties, format, yearTempData, us } = this.state;\n\n    const path = d3.geoPath();\n\n    const x = d3.scaleLinear()\n      .domain(d3.extent(color.domain()))\n      .rangeRound([600, 860]);\n\n    const svg = d3.select(this.refs.anchor);\n\n    const g = svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,40)\");\n\n    g.selectAll(\"rect\")\n      .data(color.range().map(d => color.invertExtent(d)))\n      .enter().append(\"rect\")\n        .attr(\"height\", 8)\n        .attr(\"x\", d => x(d[0]))\n        .attr(\"width\", d => x(d[1]) - x(d[0]))\n        .attr(\"fill\", d => color(d[0]));\n\n    g.append(\"text\")\n      .attr(\"class\", \"caption\")\n      .attr(\"x\", x.range()[0])\n      .attr(\"y\", -6)\n      .attr(\"fill\", \"#000\")\n      .attr(\"text-anchor\", \"start\")\n      .attr(\"font-weight\", \"bold\")\n      .text(yearTempData.title);\n\n    g.call(d3.axisBottom(x)\n        .tickSize(13)\n        .tickFormat(format)\n        .tickValues(color.range().slice(1).map(d => color.invertExtent(d)[0]))\n      )\n      .select(\".domain\")\n        .remove();\n\n    svg.append(\"g\")\n      .attr(\"class\", \"districts\")\n      .selectAll(\"path\")\n      .data(topojson.feature(us, us.objects.counties).features)\n      .enter().append(\"path\")\n        .attr(\"class\", \"county\")\n        .attr(\"fill\", d => color(yearTempData.get(d.id)))\n        .attr(\"d\", path)\n      .append(\"title\")\n        .text(d => {\n          const county = counties.get(d.id);\n          const countyTemp = yearTempData.get(d.id);\n          return isNaN(countyTemp) ? \"Missing value\" : `${county} - ${countyTemp}F`; \n          }\n        );\n\n    svg.append(\"path\")\n      .datum(topojson.mesh(us, us.objects.states, (a, b) => a !== b))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"white\")\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"d\", path);\n  }\n\n  render() { \n    const { isOn, showButtons, years, index } = this.state;\n\n    return (\n      <div>\n        <div>\n          {years[index]}\n        </div>\n        <svg ref='anchor' width={960} height={600} />\n        <ControlButtons \n          isOn={isOn}\n          showButtons={showButtons}\n          pauseMap={this.pauseMap}\n          startMap={this.startMap}\n          resetMap={this.resetMap}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Choropleth;\n","// External imports\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, LineSeries, Hint } from 'react-vis';\n\n// Internal imports\nimport co2Data500 from '../../data/LineGraph/co2-ppm-0-500.csv';\nimport co2Data1000 from '../../data/LineGraph/co2-ppm-500-1000.csv';\nimport co2Data1500 from '../../data/LineGraph/co2-ppm-1000-1500.csv';\nimport co2Data2000 from '../../data/LineGraph/co2-ppm-1500-2014.csv';\nimport co2DataTotal from '../../data/LineGraph/co2-ppm-total.csv';\n\nimport './LineGraph.css';\n\nclass LineGraph extends Component {\n   state = {\n    co2Data500: [],\n    co2Data1000: [],\n    co2Data1500: [],\n    co2Data2000: [],\n    co2DataTotal: [],\n    data: [],\n    segmentIndex: 0,\n    value: false,\n  };\n\n  componentDidMount() {\n    Promise.all([\n      d3.csv(co2Data500),\n      d3.csv(co2Data1000),\n      d3.csv(co2Data1500),\n      d3.csv(co2Data2000),\n      d3.csv(co2DataTotal),\n    ])\n    .then((files) => {\n      const co2DataFirst = files[0].map(d => ({ x: parseInt(d.year), y: parseInt(d.data_mean_global) }));\n      const co2DataSecond = files[1].map(d => ({ x: parseInt(d.year), y: parseInt(d.data_mean_global) }));\n      const co2DataThird = files[2].map(d => ({ x: parseInt(d.year), y: parseInt(d.data_mean_global) }));\n      const co2DataFourth = files[3].map(d => ({ x: parseInt(d.year), y: parseInt(d.data_mean_global) }));\n      const co2DataTotal = files[4].map(d => ({ x: parseInt(d.year), y: parseInt(d.data_mean_global) }));\n      this.setState({\n        co2Data500: co2DataFirst,\n        co2Data1000: co2DataSecond,\n        co2Data1500: co2DataThird,\n        co2Data2000: co2DataFourth,\n        co2DataTotal: co2DataTotal,\n        data: co2DataFirst,\n      })\n    })\n  }\n\n  handleClick = () => {\n    const { segmentIndex } = this.state;\n    const co2Segments = ['co2Data1000', 'co2Data1500', 'co2Data2000', 'co2DataTotal'];\n    const segment = co2Segments[segmentIndex];\n    console.log(segmentIndex);\n    if (segmentIndex <= 2) {\n      this.setState({ \n        data: this.state.data.concat(this.state[segment]),\n        segmentIndex: this.state.segmentIndex + 1,\n      });\n    }\n  }\n\n  render() {\n    const { segmentIndex } = this.state;\n    return (\n      <div className='graph-container'>\n        <button onClick={() => this.handleClick()}>\n          click me\n        </button>\n        <XYPlot \n          animate={true}\n          className='line-graph-plot'\n          onMouseLeave={() => this.setState({value: false})}\n          width={700} \n          height={500}\n          yDomain={ segmentIndex === 3 ? null : [250, 300]}\n        >\n          <HorizontalGridLines />\n          <VerticalGridLines />\n          <XAxis />\n          <YAxis />\n          <LineSeries\n            className='line-graph-path'\n            curve={'curveMonotoneX'}\n            data={this.state.data}\n            onNearestX={d => this.setState({value: d})}\n          />\n          {this.state.value && <Hint value={this.state.value} />}\n        </XYPlot>\n      </div>\n    );\n  }\n}\n\nexport default LineGraph;\n","// External imports\nimport React, { Component } from 'react';\n\n// Internal imports\nimport HeroBanner from '../HeroBanner';\nimport BubbleGraph from '../BubbleGraph';\nimport Choropleth from '../Choropleth';\nimport LineGraph from '../LineGraph';\n\nimport './StoryboardContainer.css';\n\nclass StoryboardContainer extends Component {\n \n  render() { \n\n    return (\n      <div>\n        <HeroBanner />\n        <LineGraph />\n        {/* <BubbleGraph />\n        <Choropleth /> */}\n      </div>\n    );\n  }\n}\n\nexport default StoryboardContainer;\n","import React from 'react';\nimport StoryboardContainer from './components/StoryboardContainer'\n\nconst App = () => <StoryboardContainer />\n\nexport default App;\n","import React, { Component } from 'react';\nimport { ParallaxProvider } from 'react-scroll-parallax';\n\nimport App from './App';\n\nclass AppContainer extends Component {\n  render() {\n    return (\n      <ParallaxProvider>\n        <App />\n      </ParallaxProvider>\n    );\n  }\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppContainer from './AppContainer';\n\nReactDOM.render(<AppContainer />, document.getElementById('root'));\n"],"sourceRoot":""}